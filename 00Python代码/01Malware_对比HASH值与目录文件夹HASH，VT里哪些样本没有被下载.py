import os, sys, hashlib, argparse


def CalcSha1(filepath):  # 计算sha1
    with open(filepath, 'rb') as f:
        sha1obj = hashlib.sha1()
        sha1obj.update(f.read())
        hash = sha1obj.hexdigest()
        return hash


def CalcMd5(filepath):  # 计算MD5
    with open(filepath, 'rb') as f:
        sha1obj = hashlib.md5()
        sha1obj.update(f.read())
        hash = sha1obj.hexdigest()
        return hash


def CalcSha256(filepath):  # 计算sha256
    with open(filepath, 'rb') as f:
        sha1obj = hashlib.sha256()
        sha1obj.update(f.read())
        hash = sha1obj.hexdigest()
        return hash


def file_name_change(sample_info, type='sha256'):  # rename the file
    if sample_info['num']==0:#说明样本没有命中过
        (filepath, filename) = os.path.split(sample_info['path'])#分割出文件路径和文件名
        file_name=''#正确的文件名
        if type=='md5':
            file_name=sample_info['md5']
        elif type=='sha1':
            file_name=sample_info['sha1']
        else:
            file_name = sample_info['sha256']
        new_file_full_path = os.path.join(filepath, file_name)
        try:
            os.rename(sample_info['path'], new_file_full_path)
            sample_info['num']+=1
        except(WindowsError) as e:
            repeated_hash.append(sample_info[type])
    else:
        sample_info['num'] += 1
        repeated_hash.append(sample_info[type])

parser = argparse.ArgumentParser(description='input the samples floder fullpath and the hash text file path')
parser.add_argument('-s', '--samplePath', type=str, help="The Samples floder full path")
parser.add_argument('-t', '--hashPath', type=str, help="The hash text file path")
args = parser.parse_args()
hashfilepath = args.hashPath
# hashfilepath='C:\\Users\\Odin\\Desktop\\hash.txt'
with open(hashfilepath) as file_objeact:
    a = file_objeact.readlines()  # Get the hash list file info.
pure_a = []  # Must clean some symbol,and turn to lower number
for i in a:
    pure_a.append(i.strip().lower())
pure_a = list(set(pure_a))  # clean the repeated
pure_len = len(pure_a)
sha1_list = []
md5_list = []
sha256_list = []
nrror_list = []
repeated_hash=[]
for line in pure_a:
    if len(line) is 64:
        sha256_list.append(line)
    elif len(line) is 40:
        sha1_list.append(line)
    elif len(line) is 32:
        md5_list.append(line)
    else:
        nrror_list.append(line)

print "Input %d hashs."%(len(a))
print "But have %d hashs Appear multiple times."%(len(a)-pure_len)
print "MD5:%d lines\nSH1-hash:%s lines\nSHA-256:%s" % (len(md5_list), len(sha1_list), len(sha256_list))
print "And %s lines We are not sure." % (len(nrror_list))
print "Total:%d lines" % (len(md5_list) + len(sha1_list) + len(sha256_list))

path = args.samplePath
# path='C:\\Users\\Odin\\Desktop\\3'
file_list = os.listdir(path)
print "We find %d files" % (len(file_list))  # Get samples file list
hash_not_found = []
sample_info_list = []  # sample info list
for i in file_list:  #
    sample_info_list.append(
        {'path': path + '\\' + i,
         'md5': CalcMd5(path + "\\\\" + i),
         'sha1': CalcSha1(path + "\\\\" + i),
         'sha256': CalcSha256(path + "\\\\" + i),
         'num':0})#用来统计命中次数

for info in sample_info_list:
    if info['sha256'] in sha256_list:
        file_name_change(info,'sha256')
        try:
            pure_a.remove(info['sha256'])
        except(ValueError) as e:
            pass
    if info['md5'] in md5_list:
        file_name_change(info,'md5')
        try:
            pure_a.remove(info['md5'])
        except(ValueError) as e:
            pass
    if info['sha1'] in sha1_list:
        file_name_change(info,'sha1')
        try:
            pure_a.remove(info['sha1'])
        except(ValueError) as e:
            pass




print "Finished."
print "But have %d hashs repeated(defferent hash point to same sample)."%(len(repeated_hash))
print "%d hashs not find." % (len(pure_a))
print "So Total(%d)==multi-hashs(%d)+repeated(%d)+Not foud(%d)+sample num(%d)?"%(len(a),(len(a)-pure_len),len(repeated_hash),len(pure_a),len(file_list))
if len(a)==(len(a)-pure_len)+len(repeated_hash)+len(pure_a)+len(file_list):
    print "pass"
else:
    print "error..."
f = open("log.txt", "w+")
f.writelines("Total hash:%d.\n"%(len(a)))#写入hash总数
f.writelines("same hash:%d.\n"%(len(a)-pure_len))#计算出"重复过滤"操作中被过滤的hash
f.writelines("Not Found:(%d lines)\n"%(len(pure_a)))
for i in pure_a:#碰撞剩余的hash就是没找到的hash
    f.writelines(i + "\n")
f.writelines("Repeated hash:(%d lines)\n"%(len(repeated_hash)))#多次碰撞的hash说明是同一样本的不同hash种类
for i in repeated_hash:
    f.writelines(i + "\n")
f.writelines("Total(%d)==multi-hashs(%d)+repeated(%d)+Not foud(%d)+sample num(%d)"%(len(a),(len(a)-pure_len),len(repeated_hash),len(pure_a),len(file_list)))
f.close()
print "And input the result to " + os.getcwd() + "\\log.txt"