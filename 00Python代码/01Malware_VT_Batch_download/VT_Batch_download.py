#version:python3.7
#debugger version:windows 7 sp1
#Author:Chey,Helos
#date:2018-07-03
import requests, re,argparse
from urllib import parse
class Vt_option:#VT的操作类
    csrf_token=""#操作的关键cookie数据
    vt_url = ''#VT的主页url
    vt_login_url = ''  # VT的登陆链接
    vt_search_url = ''  # VT的查询链接
    post_data_login={}#登陆提交的表单数据
    post_data_search={}#查询需要的表单数据
    post_header={}#post的header内容
    session = requests.session()  # 创建会话
# ----------------------------------------------------------------------------------------------------------------------
    def set_csrf(self):#获取关键cookie数据的函数
        post_data=parse.urlencode(self.post_data_login)#对登陆表单数据进行编码
        session = requests.session()#创建会话
        recv_data = self.session.post(self.vt_login_url, data=post_data, headers=self.post_header)  # 尝试登陆
        self.csrf_token = re.findall(r'VT_CSRF=([a-z0-9]+)', recv_data.headers['Set-Cookie'])[0]#获取token
        if not self.csrf_token:
            print('Login Failed,please check Proxy Setting,sername or password.')
            exit()
        else:
            print("Login successful.Get csrf_token:"+self.csrf_token+".")
#-----------------------------------------------------------------------------------------------------------------------
    def __init__(self):#初始化函数
        self.vt_url='https://www.virustotal.com'
        self.vt_search_url='https://www.virustotal.com/intelligence/search/results/'
        self.vt_login_url='https://www.virustotal.com/en/account/signin/'
        self.post_data_login={'next':'%2Fen%2F','username':'yuzey','password':'a53880388'}#username,password
        self.post_data_search={'query':0,'order':'ls','direction':'desc','page':'undefined'}#query字段为查询的样本的hash
        self.post_header={'Content-Type': 'application/x-www-form-urlencoded','Referer': 'https://www.virustotal.com/en/account/signin/'}
        self.set_csrf()#设置csrf_token的值便于接下来的操作
# ----------------------------------------------------------------------------------------------------------------------
    def search(self,hash):#查询样本的操作
        self.post_data_search['query']=hash#修改表单的hash数据
        post_headers = {'X-CSRFToken': self.csrf_token}
        post_data = parse.urlencode(self.post_data_search) # 编码
        recv_data = self.session.post(self.vt_search_url, data=post_data, headers=post_headers)  # 接受返回的信息
        find_num = re.findall(r'\"total\": ([0-9]+)', recv_data.text)[0]#获取查询到的信息的数量
        if int(find_num)==0:
            print('sample(hash:'+hash+') not found.')
            return
        else:
            print('sample(hash:'+hash+') found %d.'%(int(find_num)))
            return recv_data
#-----------------------------------------------------------------------------------------------------------------------
    def download_sample(self,hash,sample_dir,naming_mode="default"):
        recv_data=self.search(hash)
        if not recv_data:
            return
        else:
            download_url = re.findall(r'<a href=\\\"(/intelligence/download/\?sha256=[a-z0-9]+)\\', recv_data.text)[0]  # 需要正则匹配到下载的链接
            if naming_mode is "hash":
                file_name = hash#hash命名法
            else:
                file_name = re.findall(r'[a-zA-Z0-9]{64}', download_url)[0]  # 获取下载的文件的名称的hash
            download_url = self.vt_url + download_url#合成完整的下载链接
            file_data = self.session.get(download_url)#获取文件
            with open(sample_dir + '\\' + file_name, 'wb') as file:
                file.write(file_data.content)
                file.close()
            print("download sample successful(hash:" + hash + "),size: %d bytes."%(len(file_data.content)))
            return hash

parser = argparse.ArgumentParser(description='Vt Samples Downloader')
parser.add_argument('-s', '--samplePath', type=str, help="The Samples floder full path")
parser.add_argument('-a', '--hashPath', type=str, help="The hash text file path")
args=parser.parse_args()
if __name__=="__main__":
    vt_op=Vt_option()
    with open(args.hashPath,'r') as file:
        hash_list=file.readlines()
        file.close()
    for file_hash in hash_list:
        vt_op.download_sample(file_hash.strip('\n'),args.samplePath)

