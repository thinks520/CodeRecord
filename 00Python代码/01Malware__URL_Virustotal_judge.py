import requests,re,json,time,random
class get_hash_report:
    USER_AGENTS=[#User-Agent池
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20",
        "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)",
        "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)",
        "Mozilla/4.0 (compatible; MSIE 7.0; AOL 9.5; AOLBuild 4337.35; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)",
        "Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)",
        "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)",
        "Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 1.0.3705; .NET CLR 1.1.4322)",
        "Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)",
        "Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/523.15 (KHTML, like Gecko, Safari/419.3) Arora/0.3 (Change: 287 c9dfb30)",
        "Mozilla/5.0 (X11; U; Linux; en-US) AppleWebKit/527+ (KHTML, like Gecko, Safari/419.3) Arora/0.6",
        "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2pre) Gecko/20070215 K-Ninja/2.1.1",
        "Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/20080705 Firefox/3.0 Kapiko/3.0",
        "Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5",
        "Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6",
        "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20",
        "Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52"
    ]
    PROXY_LIST=[#高匿代理池
        '112.240.181.121:9000',
        '115.223.223.65:9000',
        '115.223.221.134:9000',
        '122.241.217.152:9000',
        '180.118.128.145:9000',
        '223.150.39.113:9000'
    ]
    request_header={#合成头部信息
        'User-Agent':0,
        'X_FORWARDED_FOR':0,
    }
    def __init__(self,hash_or_url,type):
        self.session = requests.session()  #初始化请求会话
        if type is 'hash':#查询hash的url模板
            self.vt_search_url='https://www.virustotal.com/ui/search?query=[hash_or_url]&relationships[url]=network_location%2Clast_serving_ip_address&relationships[comment]=author%2Citem'
        elif type is 'url':#查询url的url模板
            self.vt_search_url='https://www.virustotal.com/ui/domains/[hash_or_url]/urls?relationships=network_location'
        self.init_search_url(hash_or_url)#初始化查询链接
        self.analysis_report_list=[]#存放返回的数据结果
        self.init_header()#随机化头部
        self.recv_data = self.session.get(self.vt_search_url,headers=self.request_header,proxies={'http':random.choice(self.PROXY_LIST)})#获取查询的信息
        if self.recv_data.status_code==requests.codes.too_many_requests:#判断是否返回429(访问过于频繁)
            print('run!Forrest Run,Don\'t be catched.Σ( ° △ °|||)︴')#被发现了，进入人机验证了，凉凉
            return
        self.analysis_list=self.format_result(type)#获取返回的内容列表


    def format_result(self,type):#结构化数据，方便接下来的分析工作
        if type is 'hash':
            try:
                self.analysis_list_str = re.findall(r'\"last_analysis_results\": ([\s\S]+)\"last_analysis_stats\"', self.recv_data.text)[0]  # 获取验证结果的列表数据
            except IndexError as e:
                return#无法获取到查询的内容，一般情况下是Not Found
            analysis_list = re.findall(r': ({[\s\S]+?}),', self.analysis_list_str)
            analysis_list[-1] = self.analysis_list[-1][:-1]  # 最后一个str切掉末尾的'}'符号，防止干扰json识别
            for analysis in self.analysis_list:
                self.analysis_report_list.append(json.loads(analysis))
        else:
            self.analysis_list_str=re.findall(r'\"last_analysis_stats\": ({[\s\S]+?}),',self.recv_data.text)
            if len(self.analysis_list_str) is 0:#说明无法获取对应的分析内容
                return
            for info in self.analysis_list_str:
                self.analysis_report_list.append(json.loads(info))
    def init_search_url(self,hash_or_url):#初始化查询的url
        self.vt_search_url=self.vt_search_url.replace('[hash_or_url]',hash_or_url)
    def get_report(self):#获取查询的内容的序列
        return self.analysis_report_list
    def init_header(self):#初始化随机的请求头部
        self.request_header['User-Agent']=random.choice(self.USER_AGENTS)#随机化一个User-Agent
        self.request_header['X_FORWARDED_FOR']='%d.%d.%d.%d' % (random.randint(1, 254),random.randint(1, 254),random.randint(1, 254),random.randint(1, 254))#随机一个IP
if __name__=='__main__':
    url='interstat.eu'
    file_info = get_hash_report(url,'url')
    #file_info = get_hash_report(‘001E4927F5AB53A013EF0906FA0E8F40’,'hash')
    research_info=file_info.get_report()
    time.sleep(random.randint(3,5))